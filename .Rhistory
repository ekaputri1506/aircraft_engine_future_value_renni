model = ModelNested, k = 3, data = betablocker,
cluster = posterior(betaMix))
parameters(betaMixNested)
c(BIC(betaMix), BIC(betaMixNested), BIC(betaMixFix_3))
###################################################
### code chunk number 23: mixture-regressions.Rnw:876-877
###################################################
data("bioChemists", package = "flexmix")
###################################################
### code chunk number 24: mixture-regressions.Rnw:908-912
###################################################
data("bioChemists", package = "flexmix")
Model1 <- FLXMRglm(family = "poisson")
ff_1 <- stepFlexmix(art ~ ., data = bioChemists, k = 1:3, model = Model1)
ff_1 <- getModel(ff_1, "BIC")
###################################################
### code chunk number 25: mixture-regressions.Rnw:929-931
###################################################
print(plot(refit(ff_1), bycluster = FALSE,
scales = list(x = list(relation = "free"))))
###################################################
### code chunk number 26: mixture-regressions.Rnw:938-942
###################################################
Model2 <- FLXMRglmfix(family = "poisson", fixed = ~ kid5 + mar + ment)
ff_2 <- flexmix(art ~ fem + phd, data = bioChemists,
cluster = posterior(ff_1), model = Model2)
c(BIC(ff_1), BIC(ff_2))
###################################################
### code chunk number 27: mixture-regressions.Rnw:950-951
###################################################
summary(refit(ff_2))
###################################################
### code chunk number 28: mixture-regressions.Rnw:958-962
###################################################
Model3 <- FLXMRglmfix(family = "poisson", fixed = ~ kid5 + mar + ment)
ff_3 <- flexmix(art ~ fem, data = bioChemists, cluster = posterior(ff_2),
model = Model3)
c(BIC(ff_2), BIC(ff_3))
###################################################
### code chunk number 29: mixture-regressions.Rnw:970-971
###################################################
print(plot(refit(ff_3), bycluster = FALSE, scales = list(x = list(relation = "free"))))
###################################################
### code chunk number 30: mixture-regressions.Rnw:981-987
###################################################
Model4 <- FLXMRglmfix(family = "poisson", fixed = ~ kid5 + mar + ment)
ff_4 <- flexmix(art ~ 1, data = bioChemists, cluster = posterior(ff_2),
concomitant = FLXPmultinom(~ fem), model = Model4)
parameters(ff_4)
summary(refit(ff_4), which = "concomitant")
BIC(ff_4)
###################################################
### code chunk number 31: mixture-regressions.Rnw:996-1000
###################################################
Model5 <- FLXMRglmfix(family = "poisson", fixed = ~ kid5 + ment + fem)
ff_5 <- flexmix(art ~ 1, data = bioChemists, cluster = posterior(ff_2),
model = Model5)
BIC(ff_5)
###################################################
### code chunk number 32: mixture-regressions.Rnw:1006-1013
###################################################
pp <- predict(ff_5, newdata = data.frame(kid5 = 0,
mar = factor("Married", levels = c("Single", "Married")),
fem = c("Men", "Women"),  ment = mean(bioChemists$ment)))
matplot(0:12, sapply(unlist(pp), function(x) dpois(0:12, x)),
type = "b", lty = 1, xlab = "Number of articles", ylab = "Probability")
legend("topright", paste("Comp.", rep(1:2, each = 2), ":",
c("Men", "Women")), lty = 1, col = 1:4, pch = paste(1:4), bty = "n")
###################################################
### code chunk number 33: mixture-regressions.Rnw:1362-1367
###################################################
data("dmft", package = "flexmix")
Model <- FLXMRziglm(family = "poisson")
Fitted <- flexmix(End ~ log(Begin + 0.5) + Gender + Ethnic + Treatment,
model = Model, k = 2 , data = dmft, control = list(minprior = 0.01))
summary(refit(Fitted))
###################################################
### code chunk number 34: refit (eval = FALSE)
###################################################
## print(plot(refit(Fitted), components = 2, box.ratio = 3))
###################################################
### code chunk number 35: mixture-regressions.Rnw:1396-1397
###################################################
print(plot(refit(Fitted), components = 2, box.ratio = 3))
###################################################
### code chunk number 36: mixture-regressions.Rnw:1442-1449
###################################################
Concomitant <- FLXPmultinom(~ yb)
MyConcomitant <- myConcomitant(~ yb)
m2 <- flexmix(. ~ x, data = NPreg, k = 2, model = list(Model_n, Model_p),
concomitant = Concomitant)
m3 <- flexmix(. ~ x, data = NPreg, k = 2, model = list(Model_n, Model_p),
cluster = posterior(m2), concomitant = MyConcomitant)
###################################################
### code chunk number 37: mixture-regressions.Rnw:1451-1453
###################################################
summary(m2)
summary(m3)
###################################################
### code chunk number 38: mixture-regressions.Rnw:1458-1462
###################################################
determinePrior <- function(object) {
object@concomitant@fit(object@concomitant@x,
posterior(object))[!duplicated(object@concomitant@x), ]
}
###################################################
### code chunk number 39: mixture-regressions.Rnw:1465-1467
###################################################
determinePrior(m2)
determinePrior(m3)
###################################################
### code chunk number 40: mixture-regressions.Rnw:1509-1513
###################################################
SI <- sessionInfo()
pkgs <- paste(sapply(c(SI$otherPkgs, SI$loadedOnly), function(x)
paste("\\\\pkg{", x$Package, "} ",
x$Version, sep = "")), collapse = ", ")
## ----setup, include = FALSE----------------------------------------------
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
## ------------------------------------------------------------------------
library(gclus)
data(longley)
longley.cor <- cor(longley)
longley.color <- dmat.color(longley.cor)
## ----fig.width=5, fig.height=5, fig.align='center'-----------------------
par(mar=c(1,1,1,1))
plotcolors(longley.color,dlabels=rownames(longley.color))
## ----eval=F--------------------------------------------------------------
#  longley.color <- dmat.color(longley.cor, byrank=FALSE)
#  longley.color <- dmat.color(longley.cor, breaks=c(-1,0,.5,.8,1),
#                              cm.colors(4))
## ----fig.width=5, fig.height=5, fig.align='center'-----------------------
par(mar=c(1,1,1,1))
longley.o <- order.hclust(longley.cor)
longley.color1 <- longley.color[longley.o,longley.o]
plotcolors(longley.color1,dlabels=rownames(longley.color1))
## ----fig.width=5, fig.height=5, fig.align='center'-----------------------
par(mar=c(1,1,1,1))
cpairs(longley, order= longley.o,panel.color= longley.color)
## ----fig.width=8, fig.height=3, fig.align='center', out.width="100%"-----
cparcoord(longley, order= longley.o,panel.color= longley.color,
horizontal=TRUE, mar=c(2,4,1,1))
## ----fig.width=6, fig.height=4, fig.align='center'-----------------------
par(mar=c(1,1,1,1))
data(eurodist)
dis <- as.dist(eurodist)
hc <- hclust(dis, "ave")
plot(hc)
## ----fig.width=6, fig.height=4, fig.align='center'-----------------------
par(mar=c(1,1,1,1))
hc1 <- reorder.hclust(hc, dis)
plot(hc1)
## ----fig.width=8, fig.height=3.5, fig.align='center'---------------------
layout(matrix(1:2,nrow=1,ncol=2))
par(mar=c(1,6,1,1))
cmat <- dmat.color(eurodist, rev(cm.colors(5)))
plotcolors(cmat[hc$order,hc$order], rlabels=labels(eurodist)[hc$order])
plotcolors(cmat[hc1$order,hc1$order], rlabels=labels(eurodist)[hc1$order])
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
###################################################
### code chunk number 1: flexmix-intro
###################################################
set.seed(1504)
options(width=70, prompt = "R> ", continue = "+  ", useFancyQuotes = FALSE)
grDevices::ps.options(family="Times")
library("graphics")
library("flexmix")
data("NPreg")
###################################################
### code chunk number 2: flexmix-intro
###################################################
library("flexmix")
data("NPreg")
m1 <- flexmix(yn ~ x + I(x^2), data = NPreg, k = 2)
m1
###################################################
### code chunk number 3: flexmix-intro
###################################################
parameters(m1, component = 1)
###################################################
### code chunk number 4: flexmix-intro
###################################################
parameters(m1, component = 2)
###################################################
### code chunk number 5: flexmix-intro
###################################################
table(NPreg$class, clusters(m1))
###################################################
### code chunk number 6: flexmix-intro
###################################################
summary(m1)
###################################################
### code chunk number 7: flexmix-intro
###################################################
par(mfrow=c(1,2))
plot(yn~x, col=class, pch=class, data=NPreg)
plot(yp~x, col=class, pch=class, data=NPreg)
###################################################
### code chunk number 8: flexmix-intro
###################################################
print(plot(m1))
###################################################
### code chunk number 9: flexmix-intro
###################################################
rm1 <- refit(m1)
summary(rm1)
###################################################
### code chunk number 10: flexmix-intro
###################################################
options(width=55)
###################################################
### code chunk number 11: flexmix-intro
###################################################
m2 <- flexmix(yp ~ x, data = NPreg, k = 2,
model = FLXMRglm(family = "poisson"))
summary(m2)
###################################################
### code chunk number 12: flexmix-intro
###################################################
options(width=65)
###################################################
### code chunk number 13: flexmix-intro
###################################################
print(plot(m2))
###################################################
### code chunk number 14: flexmix-intro
###################################################
m3 <- flexmix(~ x, data = NPreg, k = 2,
model=list(FLXMRglm(yn ~ . + I(x^2)),
FLXMRglm(yp ~ ., family = "poisson")))
###################################################
### code chunk number 15: flexmix-intro
###################################################
print(plot(m3))
###################################################
### code chunk number 16: flexmix-intro
###################################################
m4 <- flexmix(yn ~ x + I(x^2) | id2, data = NPreg, k = 2)
summary(m4)
###################################################
### code chunk number 17: flexmix-intro
###################################################
m5 <- flexmix(yn ~ x + I(x^2), data = NPreg, k = 2,
control = list(iter.max = 15, verbose = 3, classify = "hard"))
###################################################
### code chunk number 18: flexmix-intro
###################################################
m6 <- flexmix(yp ~ x + I(x^2), data = NPreg, k = 4,
control = list(minprior = 0.2))
m6
###################################################
### code chunk number 19: flexmix-intro
###################################################
m7 <- stepFlexmix(yp ~ x + I(x^2), data = NPreg,
control = list(verbose = 0), k = 1:5, nrep = 5)
###################################################
### code chunk number 20: flexmix-intro
###################################################
getModel(m7, "BIC")
###################################################
### code chunk number 21: flexmix-intro
###################################################
library("flexmix")
set.seed(1504)
options(width=60)
grDevices::ps.options(family="Times")
suppressMessages(require("ellipse"))
suppressMessages(require("mvtnorm"))
source("mymclust.R")
###################################################
### code chunk number 1: flexmix-intro
###################################################
set.seed(1504)
options(width=70, prompt = "R> ", continue = "+  ", useFancyQuotes = FALSE)
grDevices::ps.options(family="Times")
library("graphics")
library("flexmix")
data("NPreg")
library("flexmix", lib.loc="~/R/win-library/3.5")
install.packages("ellipse")
library("ellipse", lib.loc="~/R/win-library/3.5")
### R code from vignette source 'sandwich.Rnw'
###################################################
### code chunk number 1: preliminaries
###################################################
library("zoo")
library("sandwich")
library("strucchange")
library("lmtest")
options(prompt = "R> ", continue = "+   ")
###################################################
### code chunk number 2: hac-kweights
###################################################
curve(kweights(x, kernel = "Quadratic", normalize = TRUE),
from = 0, to = 3.2, xlab = "x", ylab = "K(x)")
curve(kweights(x, kernel = "Bartlett", normalize = TRUE),
from = 0, to = 3.2, col = 2, add = TRUE)
curve(kweights(x, kernel = "Parzen", normalize = TRUE),
from = 0, to = 3.2, col = 3, add = TRUE)
curve(kweights(x, kernel = "Tukey", normalize = TRUE),
from = 0, to = 3.2, col = 4, add = TRUE)
lines(c(0, 0.5), c(1, 1), col = 6)
lines(c(0.5, 0.5), c(1, 0), lty = 3, col = 6)
lines(c(0.5, 3.2), c(0, 0), col = 6)
curve(kweights(x, kernel = "Quadratic", normalize = TRUE),
from = 0, to = 3.2, col = 1, add = TRUE)
text(0.5, 0.98, "Truncated", pos = 4)
text(0.8, kweights(0.8, "Bartlett", normalize = TRUE), "Bartlett", pos = 4)
text(1.35, kweights(1.4, "Quadratic", normalize = TRUE), "Quadratic Spectral", pos = 2)
text(1.15, 0.29, "Parzen", pos = 4)
arrows(1.17, 0.29, 1, kweights(1, "Parzen", normalize = TRUE), length = 0.1)
text(1.3, 0.2, "Tukey-Hanning", pos = 4)
arrows(1.32, 0.2, 1.1, kweights(1.1, "Tukey", normalize = TRUE), length = 0.1)
###################################################
### code chunk number 3: loadlibs1
###################################################
library("sandwich")
library("lmtest")
###################################################
### code chunk number 4: hc-data
###################################################
data("PublicSchools")
ps <- na.omit(PublicSchools)
ps$Income <- ps$Income * 0.0001
###################################################
### code chunk number 5: hc-model
###################################################
fm.ps <- lm(Expenditure ~ Income + I(Income^2), data = ps)
###################################################
### code chunk number 6: hc-test1
###################################################
coeftest(fm.ps, df = Inf, vcov = vcovHC(fm.ps, type = "HC0"))
###################################################
### code chunk number 7: hc-test2
###################################################
coeftest(fm.ps, df = Inf, vcov = vcovHC(fm.ps, type = "HC4"))
###################################################
### code chunk number 8: hc-plot
###################################################
plot(Expenditure ~ Income, data = ps,
xlab = "per capita income",
ylab = "per capita spending on public schools")
inc <- seq(0.5, 1.2, by = 0.001)
lines(inc, predict(fm.ps, data.frame(Income = inc)), col = 4, lty = 2)
fm.ps2 <- lm(Expenditure ~ Income, data = ps)
abline(fm.ps2, col = 4)
text(ps[2,2], ps[2,1], rownames(ps)[2], pos = 2)
###################################################
### code chunk number 9: hac-data
###################################################
data("Investment")
###################################################
### code chunk number 10: hac-model
###################################################
fm.inv <- lm(RealInv ~ RealGNP + RealInt, data = Investment)
###################################################
### code chunk number 11: hac-test1
###################################################
coeftest(fm.inv, df = Inf, vcov = NeweyWest(fm.inv, lag = 4, prewhite = FALSE))
###################################################
### code chunk number 12: hac-test2
###################################################
coeftest(fm.inv, df = Inf, vcov = NeweyWest)
###################################################
### code chunk number 13: hac-test3
###################################################
parzenHAC <- function(x, ...) kernHAC(x, kernel = "Parzen", prewhite = 2,
adjust = FALSE, bw = bwNeweyWest, ...)
coeftest(fm.inv, df = Inf, vcov = parzenHAC)
###################################################
### code chunk number 14: hac-plot
###################################################
library("scatterplot3d")
s3d <- scatterplot3d(Investment[,c(5,7,6)],
type = "b", angle = 65, scale.y = 1, pch = 16)
s3d$plane3d(fm.inv, lty.box = "solid", col = 4)
###################################################
### code chunk number 15: loadlibs2
###################################################
library("strucchange")
data("RealInt")
###################################################
### code chunk number 16: sc-ocus
###################################################
ocus <- gefp(RealInt ~ 1, fit = lm, vcov = kernHAC)
###################################################
### code chunk number 17: sc-bp
###################################################
bp <- breakpoints(RealInt ~ 1)
confint(bp, vcov = kernHAC)
###################################################
### code chunk number 18: sc-plot
###################################################
par(mfrow = c(1, 2))
plot(ocus, aggregate = FALSE, main = "")
plot(RealInt, ylab = "Real interest rate")
lines(ts(fitted(bp), start = start(RealInt), freq = 4), col = 4)
lines(confint(bp, vcov = kernHAC))
###################################################
### code chunk number 19: sandwich.Rnw:786-787
###################################################
options(prompt = "  ")
###################################################
### code chunk number 20: sandwich.Rnw:805-807 (eval = FALSE)
###################################################
## library("sandwich")
## library("lmtest")
## library("strucchange")
###################################################
### code chunk number 21: sandwich.Rnw:814-815 (eval = FALSE)
###################################################
## data("PublicSchools")
## ps <- na.omit(PublicSchools)
## ps$Income <- ps$Income * 0.0001
###################################################
### code chunk number 22: sandwich.Rnw:819-820 (eval = FALSE)
###################################################
## fm.ps <- lm(Expenditure ~ Income + I(Income^2), data = ps)
###################################################
### code chunk number 23: sandwich.Rnw:824-829 (eval = FALSE)
###################################################
## sqrt(diag(vcov(fm.ps)))
## sqrt(diag(vcovHC(fm.ps, type = "const")))
## sqrt(diag(vcovHC(fm.ps, type = "HC0")))
## sqrt(diag(vcovHC(fm.ps, type = "HC3")))
## sqrt(diag(vcovHC(fm.ps, type = "HC4")))
###################################################
### code chunk number 24: sandwich.Rnw:833-835 (eval = FALSE)
###################################################
## coeftest(fm.ps, df = Inf, vcov = vcovHC(fm.ps, type = "HC0"))
## coeftest(fm.ps, df = Inf, vcov = vcovHC(fm.ps, type = "HC4"))
###################################################
### code chunk number 25: sandwich.Rnw:855-856 (eval = FALSE)
###################################################
## data("Investment")
###################################################
### code chunk number 26: sandwich.Rnw:860-861 (eval = FALSE)
###################################################
## fm.inv <- lm(RealInv ~ RealGNP + RealInt, data = Investment)
###################################################
### code chunk number 27: sandwich.Rnw:879-881 (eval = FALSE)
###################################################
## plot(Investment[, "RealInv"], type = "b", pch = 19, ylab = "Real investment")
## lines(ts(fitted(fm.inv), start = 1964), col = 4)
###################################################
### code chunk number 28: sandwich.Rnw:897-898 (eval = FALSE)
###################################################
## data("RealInt")
###################################################
### code chunk number 29: sandwich.Rnw:902-905 (eval = FALSE)
###################################################
## ocus <- gefp(RealInt ~ 1, fit = lm, vcov = kernHAC)
## plot(ocus, aggregate = FALSE)
## sctest(ocus)
###################################################
### code chunk number 30: sandwich.Rnw:909-912 (eval = FALSE)
###################################################
## fs <- Fstats(RealInt ~ 1, vcov = kernHAC)
## plot(fs)
## sctest(fs)
###################################################
### code chunk number 31: sandwich.Rnw:917-919 (eval = FALSE)
###################################################
## bp <- breakpoints(RealInt ~ 1)
## confint(bp, vcov = kernHAC)
## plot(bp)
###################################################
### code chunk number 32: sandwich.Rnw:923-926 (eval = FALSE)
###################################################
## plot(RealInt, ylab = "Real interest rate")
## lines(ts(fitted(bp), start = start(RealInt), freq = 4), col = 4)
## lines(confint(bp, vcov = kernHAC))
plot(RealInt, ylab = "Real interest rate")
lines(ts(fitted(bp), start = start(RealInt), freq = 4), col = 4)
lines(confint(bp, vcov = kernHAC))
bp <- breakpoints(RealInt ~ 1)
confint(bp, vcov = kernHAC)
plot(bp)
fs <- Fstats(RealInt ~ 1, vcov = kernHAC)
plot(fs)
sctest(fs)
ocus <- gefp(RealInt ~ 1, fit = lm, vcov = kernHAC)
plot(ocus, aggregate = FALSE)
sctest(ocus)
plot(Investment[, "RealInv"], type = "b", pch = 19, ylab = "Real investment")
lines(ts(fitted(fm.inv), start = 1964), col = 4)
library(tidyverse)
library(tidyquant)
library(timetk)
library(highcharter)
library(scales)
fluidRow(
column(6,
textInput("stock1", "Stock 1", "SPY")),
column(5,
numericInput("w1", "Portf. %", 25, min = 1, max = 100))
)
knit_with_parameters('~/renni/renni_cv/myproject_renniekaputri/4enginefuturevalue/renni_engine_future_value.Rmd')
shiny::runApp('Documents/renni_engine_future_value')
sfcs
getwd()
setwd("C:/Users/Test/Documents/renni/renni_cv/myproject_renniekaputri/4enginefuturevalue")
getwd()
rsconnect::showLogs()
getwd()
